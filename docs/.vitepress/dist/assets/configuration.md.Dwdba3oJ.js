import{_ as s,c as e,o as a,af as n}from"./chunks/framework.DLCvNBTH.js";const c=JSON.parse('{"title":"Configuration","description":"","frontmatter":{},"headers":[],"relativePath":"configuration.md","filePath":"configuration.md"}'),t={name:"configuration.md"};function l(o,i,h,r,p,d){return a(),e("div",null,[...i[0]||(i[0]=[n(`<h1 id="configuration" tabindex="-1">Configuration <a class="header-anchor" href="#configuration" aria-label="Permalink to “Configuration”">​</a></h1><p>This page focuses on how to configure the router for local development and production deployments: setting environment variables (<code>.env</code>) and customizing <code>provider.js</code>.</p><hr><h2 id="goals" tabindex="-1">Goals <a class="header-anchor" href="#goals" aria-label="Permalink to “Goals”">​</a></h2><ul><li>Explain which environment variables the project expects and best practices for storing them.</li><li>Show how to author <code>provider.js</code> entries: enabling/disabling providers, ordering (fallback), and useful fields.</li><li>Provide examples for local, staging, and cloud deployments (Render.com, ...).</li><li>Troubleshooting tips when providers fail or models are not found.</li></ul><hr><h2 id="env-environment-variables" tabindex="-1">.env (environment variables) <a class="header-anchor" href="#env-environment-variables" aria-label="Permalink to “.env (environment variables)”">​</a></h2><p>The repository includes a <code>.env.example</code> file with common keys. Copy it to <code>.env</code> and fill the keys for the providers you plan to use:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env.example</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .env</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># edit .env and paste your API keys</span></span></code></pre></div><h3 id="typical-keys" tabindex="-1">Typical keys <a class="header-anchor" href="#typical-keys" aria-label="Permalink to “Typical keys”">​</a></h3><ul><li><code>OPENAI_API_KEY</code> — OpenAI API key</li><li><code>GEMINI_API_KEY</code> — Google Gemini API key</li><li><code>OPENROUTER_API_KEY</code> — OpenRouter key</li><li><code>COHERE_API_KEY</code>, <code>CEREBRAS_API_KEY</code>, <code>ZAI_API_KEY</code>, <code>GROK_API_KEY</code>, <code>QROQ_API_KEY</code>, <code>LLM7_API_KEY</code> — other providers</li><li><code>PORT</code> — optional, default 3000</li></ul><blockquote><p>Tip: use descriptive names and, when you need multiple keys for the same provider (e.g. multiple OpenRouter accounts), use suffixes like <code>OPENROUTER_API_KEY</code>, <code>OPENROUTER_API_KEY_2</code> and reference them from <code>provider.js</code>.</p></blockquote><h3 id="security-deployment" tabindex="-1">Security &amp; deployment <a class="header-anchor" href="#security-deployment" aria-label="Permalink to “Security &amp; deployment”">​</a></h3><ul><li>Do <strong>not</strong> commit <code>.env</code> to Git. It is in <code>.gitignore</code> by default.</li><li>For cloud deployments, set the same variables in your provider’s environment configuration (Render, etc.).</li><li>Rotate keys regularly and use least-privileged keys where provider supports them.</li></ul><hr><h2 id="provider-js-—-how-it-works" tabindex="-1"><code>provider.js</code> — how it works <a class="header-anchor" href="#provider-js-—-how-it-works" aria-label="Permalink to “provider.js — how it works”">​</a></h2><p><code>provider.js</code> exports an <strong>ordered array</strong> of provider configuration objects. The router will attempt each provider in array order and fall back automatically if one fails.</p><p>Each provider object supports (at minimum) these fields:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;openai&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// simple identifier for logs/debug</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  apiKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OPENAI_API_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// model id to request from this provider</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  apiUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.openai.com/v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// base URL for provider-compatible OpenAI endpoints</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="important-notes" tabindex="-1">Important notes <a class="header-anchor" href="#important-notes" aria-label="Permalink to “Important notes”">​</a></h3><ul><li><code>apiKey</code> should reference the environment variable (use <code>process.env.X</code>). If the env var is missing the router will skip that provider and log a warning.</li><li><code>model</code> should match the provider’s model name exactly. If a provider uses a different naming scheme, use the exact ID that the provider’s API expects.</li><li><code>apiUrl</code> is used to create the OpenAI-compatible client; if a provider exposes a compatibility endpoint (like OpenRouter), set it accordingly.</li><li>Duplicate <code>name</code> values are allowed but can make logs confusing; prefer unique names like <code>openai</code>, <code>openai-alt</code>.</li></ul><h3 id="example-provider-js-snippet" tabindex="-1">Example <code>provider.js</code> snippet <a class="header-anchor" href="#example-provider-js-snippet" aria-label="Permalink to “Example provider.js snippet”">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;openai&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    apiKey: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OPENAI_API_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gpt-4.1-mini-2025-04-14&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    apiUrl: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://api.openai.com/v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;google-gemini&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    apiKey: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GEMINI_API_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gemini-2.5-pro&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    apiUrl: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://generativelanguage.googleapis.com/v1beta/openai/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;openrouter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    apiKey: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OPENROUTER_API_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    model: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x-ai/grok-4-fast:free&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    apiUrl: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://openrouter.ai/api/v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span></code></pre></div><h3 id="to-add-multiple-keys-for-the-same-provider" tabindex="-1">To add multiple keys for the same provider <a class="header-anchor" href="#to-add-multiple-keys-for-the-same-provider" aria-label="Permalink to “To add multiple keys for the same provider”">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// use different env vars and list providers multiple times (the router will try them in order)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;openrouter&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  apiKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OPENROUTER_API_KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// primary</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;x-ai/grok-4-fast:free&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  apiUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://openrouter.ai/api/v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;openrouter-alt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  apiKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: process.env.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">OPENROUTER_API_KEY_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// fallback / alternative account</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  model</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;z-ai/glm-4.5-air:free&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  apiUrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://openrouter.ai/api/v1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><hr><h2 id="model-selection-and-compatibility" tabindex="-1">Model selection and compatibility <a class="header-anchor" href="#model-selection-and-compatibility" aria-label="Permalink to “Model selection and compatibility”">​</a></h2><ul><li>Choose a <code>model</code> that the provider actually exposes. The router attempts to list models via the provider client using <code>client.models.list()</code> — if the model is not found it will warn in logs.</li><li>Some providers require different model name formats (e.g. <code>models/gpt-4</code> vs <code>gpt-4</code>). If in doubt, query the provider’s models endpoint or check their docs.</li></ul><hr><h2 id="tool-calling-and-streaming" tabindex="-1">Tool-calling and streaming <a class="header-anchor" href="#tool-calling-and-streaming" aria-label="Permalink to “Tool-calling and streaming”">​</a></h2><ul><li>If you plan to use <strong>tools</strong> (the project supports OpenAI-style tool metadata), pass <code>tools</code> into <code>chatCompletion</code> calls and make sure the chosen provider supports tool-calling. Not all providers do.</li><li>Streaming is enabled by passing <code>stream: true</code> to the endpoint or API call. Ensure the provider supports SSE/streaming and model supports streaming.</li></ul><hr><h2 id="local-testing-examples" tabindex="-1">Local testing &amp; examples <a class="header-anchor" href="#local-testing-examples" aria-label="Permalink to “Local testing &amp; examples”">​</a></h2><ul><li>Non-streaming test:</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tests/openai-server-non-stream.js</span></span></code></pre></div><ul><li>Streaming test:</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tests/openai-server-stream.js</span></span></code></pre></div><ul><li>Library-level test (direct router):</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tests/chat.js</span></span></code></pre></div><hr><h2 id="deployment-tips" tabindex="-1">Deployment tips <a class="header-anchor" href="#deployment-tips" aria-label="Permalink to “Deployment tips”">​</a></h2><ul><li><strong>Render</strong>: Add the same env variables to service settings. Use <code>npm start</code> as the start command (project <code>package.json</code> already sets this).</li><li>If you change <code>.env</code> or <code>provider.js</code>, restart the Node process.</li></ul><hr><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to “Troubleshooting”">​</a></h2><ul><li><code>Skipping provider ... due to missing API key</code> — check <code>.env</code> and deployment env configuration.</li><li><code>Model &lt;name&gt; not found</code> — ensure the <code>model</code> matches what the provider exposes or remove that provider from <code>provider.js</code> until you pick the right model.</li><li><code>All providers failed</code> — examine provider-specific error logs (the router logs each provider failure) and verify network access / API quotas.</li></ul><hr><h2 id="quick-checklist-before-first-run" tabindex="-1">Quick checklist before first run <a class="header-anchor" href="#quick-checklist-before-first-run" aria-label="Permalink to “Quick checklist before first run”">​</a></h2><ul><li>[ ] <code>cp .env.example .env</code> and set API keys</li><li>[ ] Edit <code>provider.js</code> to enable and order the providers you want</li><li>[ ] <code>npm install</code> and <code>npm start</code></li><li>[ ] Run <code>node tests/openai-server-non-stream.js</code> to validate</li></ul>`,48)])])}const E=s(t,[["render",l]]);export{c as __pageData,E as default};
